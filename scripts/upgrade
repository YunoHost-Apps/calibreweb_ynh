#!/bin/bash

version_gt() { 
	test "$(printf '%s\n' "$@" | sort -V | head -n 1)" != "$1";
}

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source /usr/share/yunohost/helpers

#=================================================
# LOAD SETTINGS
#=================================================
ynh_script_progression --message="Loading installation settings..." --weight=2

app=$YNH_APP_INSTANCE_NAME
domain=$(ynh_app_setting_get $app domain)
port=$(ynh_app_setting_get $app port)
path_url=$(ynh_app_setting_get $app path)
admin=$(ynh_app_setting_get $app admin)
final_path=$(ynh_app_setting_get $app final_path)
language=$(ynh_app_setting_get $app language)

#Source common.sh required to be after var initialization as some variables are updated in it that are then used in the script
#when initializing the conf file of the app
source _common.sh

#Get settings from database in case it has been changed in the app and save it in settings so that it can be used back afterward
calibre_dir=$(sqlite3 $final_path/app.db "SELECT config_calibre_dir FROM settings WHERE ID=1")
calibre_dir=${calibre_dir%/}
ynh_app_setting_set $app calibre_dir $calibre_dir

upload=$(sqlite3 $final_path/app.db "SELECT config_uploading FROM settings WHERE ID=1")
ynh_app_setting_set $app upload $upload

#=================================================
# CHECK VERSION
#=================================================

upgrade_type=$(ynh_check_app_version_changed)

current_upstream_package_version=$(ynh_app_upstream_version --manifest="/etc/yunohost/apps/$app/manifest.json") #0.96.0
current_upstream_package_version="${current_upstream_package_version/".96"/".6"}" #0.6.0

new_upstream_package_version=$(ynh_app_upstream_version) #0.96.0
new_upstream_package_version="${new_upstream_package_version/".96"/".6"}" #0.6.0

if [ -f $final_path/cps/constants.py ]; then #on est dans une version postérieur à la 0.6.0
	current_upstream_app_version=$(cat $final_path/cps/constants.py | grep STABLE_VERSION)
	current_upstream_app_version="${current_upstream_app_version/STABLE_VERSION = \{\'version\': \'/""}"
	current_upstream_app_version="${current_upstream_app_version/\'\}/""}"
else #on est encore en 0.6.0
	current_upstream_app_version='0.6.0' 
fi


#=================================================
# BACKUP BEFORE UPGRADE THEN ACTIVE TRAP
#=================================================
ynh_script_progression --message="Backing up the app before upgrading (may take a while)..." --weight=10

# Backup the current version of the app
ynh_backup_before_upgrade
ynh_clean_setup () {

	ynh_clean_check_starting

	# restore it if the upgrade fails
	ynh_restore_upgradebackup
}
# Exit if an error occurs during the execution of the script
ynh_abort_if_errors

#Stop the app in case database is updated
ynh_script_progression --message="Stopping a systemd service..." --weight=2

ynh_systemd_action --service_name=$app --action="stop"

#=================================================
# ENSURE DOWNWARD COMPATIBILITY
#=================================================
ynh_script_progression --message="Downward Compatibility checks..." --weight=1
#Close unwanted open port in firewall
if yunohost firewall list | grep -q "\- $port$"
then
	ynh_script_progression --message="Closing port $port as it shouldn't be open..."
	yunohost firewall disallow TCP $port 2>&1
fi

# If language was set delete it
if [ ! -z "$language" ]; then
	ynh_app_setting_delete --app=$app --key=language
fi

#binaries version is 0.6.0, we need to go throught upgrade to 0.6.6 so that app.db is correctly updated, otherwise database is corrupted
#set database settings as per conf file : restart server so that app.db is regenerated, then add new ldap & log settings
if version_gt "0.6.6" "$current_upstream_app_version" && [ "$current_upstream_package_version" == "0.6.0" ] && [ "$upgrade_type" == "UPGRADE_APP" ]; then
	ynh_script_progression --message="Upgrading from $current_upstream_app_version to 0.6.6..." --weight=50
	ynh_setup_source --dest_dir="$final_path" --source_id="app066"
	pip install --no-cache-dir --upgrade --target $final_path/vendor -r $final_path/requirements.txt
	chown -R $app: $final_path
	#set database settings as per conf file : restart server so that app.db is regenerated
	ynh_systemd_action --service_name=$app --action="start" --line_match="Starting Gevent server" --log_path="$final_path/calibre-web.log" -t 30
	#sleep required on low spec like raspberryPi
	sleep 2s
	ynh_systemd_action --service_name=$app --action="stop"
	conf="\"UPDATE settings SET $(. <(echo -E echo $(<../conf/init_calibre_db_settings))), $(. <(echo -E echo $(<../conf/init_calibre_db_ldap_settings))) WHERE ID=1\""
    eval sqlite3 $final_path/app.db "$conf"
	current_upstream_app_version="0.6.6"
fi

#LDAP settings were wrongly set in version prior to 0.6.13 and we could not retrieve LDAP users. This will change the settings to correct values 
if sqlite3 $final_path/app.db "SELECT config_ldap_group_object_filter FROM settings" \
	| grep -xq "(&(objectClass=posixGroup)(permission=cn=%s.main,ou=permission,dc=yunohost,dc=org))" ; then 
	eval sqlite3 $final_path/app.db "\"UPDATE settings SET config_ldap_group_object_filter='(&(objectClass=posixGroup)(cn=%s.main))' WHERE ID=1\""
fi

# Cleaning legacy permissions
if ynh_legacy_permissions_exists; then
	ynh_legacy_permissions_delete_all

	ynh_app_setting_delete --app=$app --key=is_public
fi

#Activate reverse proxy authentication
if sqlite3 $final_path/app.db "SELECT config_allow_reverse_proxy_header_login FROM settings" \
	| grep -xq "0" ; then 
	eval sqlite3 $final_path/app.db "\"UPDATE settings SET config_allow_reverse_proxy_header_login='1' WHERE ID=1\""
	eval sqlite3 $final_path/app.db "\"UPDATE settings SET config_reverse_proxy_login_header_name='X-Remote-User' WHERE ID=1\""
fi

#=================================================
# STANDARD UPGRADE STEPS
#=================================================
# DOWNLOAD, CHECK AND UNPACK SOURCE
#=================================================



if [ "$upgrade_type" == "UPGRADE_APP" ]
then
	ynh_script_progression --message="Upgrading source files from $current_upstream_app_version to $new_upstream_package_version..." --weight=10

	#Set settings constant initializer of the app
	ynh_add_config --template="../sources/patches/app-config_sql.py.patch.src" --destination="../sources/patches/app-config_sql.py.patch"
	ynh_add_config --template="../sources/patches/app-ub.py.patch.src" --destination="../sources/patches/app-ub.py.patch"
	ynh_add_config --template="../sources/patches/app-constants.py.patch.src" --destination="../sources/patches/app-constants.py.patch"
	
	# Download, check integrity, uncompress and patch the source from app.src
	ynh_setup_source --dest_dir="$final_path"
fi

#=================================================
# NGINX CONFIGURATION
#=================================================

ynh_script_progression --message="Upgrading nginx web server configuration..." --weight=5
if [ $path_url = "/" ] ; then
	ynh_replace_string "        proxy_set_header	X-Script-Name" "#       proxy_set_header	X-Script-Name" ../conf/nginx.conf
fi

if [ ynh_permission_has_user --permission="main" --user=visitors ]; then
	ynh_replace_string "#       proxy_set_header	X-Remote-User" "        proxy_set_header	X-Remote-User" ../conf/nginx.conf
fi
# Create a dedicated nginx config
ynh_add_nginx_config

#=================================================
# UPGRADE DEPENDENCIES
#=================================================

if [ "$upgrade_type" == "UPGRADE_APP" ]
then
	ynh_script_progression --message="Installing package dependencies..." --weight=15
	ynh_install_app_dependencies $PKG_DEPENDENCIES
	
	#use latest version of pip as per documentation in https://github.com/pypa/get-pip
	#cannot use helper as maintaining the checksum would be a pain in the a***
	ynh_exec_quiet curl https://bootstrap.pypa.io/get-pip.py | python3

	ynh_script_progression --message="Installing pip requirements ..." --weight=30
	pip3 install --no-cache-dir --upgrade --target $final_path/vendor -r $final_path/requirements.txt

	ynh_script_progression --message="Installing pip additionnal requirements..." --weight=40
	pip3 install --no-cache-dir --upgrade --target $final_path/vendor -r $final_path/optional-requirements.txt
fi
#=================================================
# CREATE DEDICATED USER
#=================================================

# Create a dedicated user (if not existing)
ynh_script_progression --message="Making sure dedicated system user exists..." --weight=1
ynh_system_user_create $app

# Set permissions on app files (required to be able to update database)
chown -R $app: $final_path

#=================================================
# SPECIFIC UPGRADE
#=================================================
#build multimedia directory
#=================================================
ynh_script_progression --message="Create Multimedia dir..." --weight=1
#Create multimedia directory but we do not change the calibre_dir : It's the user to make this choice.
ynh_multimedia_build_main_dir
ynh_multimedia_addaccess $app

#Update Imagick policy as per https://github.com/janeczku/calibre-web/wiki/FAQ#what-to-do-if-cover-pictures-are-not-extracted-from-pdf-files
ynh_script_progression --message="Update Imagick policy..." --weight=1

ynh_replace_string --match_string="<policy domain="coder" rights="none" pattern="PDF" />" \
		--replace_string="<policy domain="coder" rights="read" pattern="PDF" />" \
		--target_file="/etc/ImageMagick-6/policy.xml"


#=================================================
# SETUP LOGROTATE
#=================================================

# Use logrotate to manage app-specific logfile(s)
ynh_script_progression --message="Upgrading logrotate configuration..." --weight=1
ynh_use_logrotate --non-append


#=================================================
# SETUP SYSTEMD
#=================================================

# Create a dedicated systemd config
ynh_script_progression --message="Upgrading systemd configuration..." --weight=1
ynh_add_systemd_config

#=================================================
# GENERIC FINALIZATION
#=================================================
# SECURE FILES AND DIRECTORIES
#=================================================

# Set permissions on app files
chown -R $app: $final_path

#=================================================
# INTEGRATE SERVICE IN YUNOHOST
#=================================================

yunohost service add $app --description="Browse eBook in the web" --log="/var/log/$app/$app.log"

#=================================================
# RELOAD NGINX
#=================================================
ynh_script_progression --message="Reloading nginx web server..." --weight=1

ynh_systemd_action --service_name=nginx --action=reload
#=================================================
# START SYSTEMD SERVICE
#=================================================
ynh_script_progression --message="Starting a systemd service..." --weight=2

ynh_systemd_action --service_name=$app --action="start" --line_match="Starting Gevent server on" -t 30

#=================================================
# END OF SCRIPT
#=================================================

ynh_script_progression --message="Upgrade of $app completed" --last